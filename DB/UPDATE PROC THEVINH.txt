--==================NHẬP KHO=====================
CREATE TYPE dbo.ReceiptDetailType AS TABLE (
    ProductID INT,
    CellID INT,
    Quantity INT,
    PurchaseOrderID INT
);
GO

CREATE PROCEDURE sp_InsertWarehouseReceipt 
    @WarehouseID INT,
    @ReceiptDetails dbo.ReceiptDetailType READONLY
AS
BEGIN
    BEGIN TRANSACTION;

    BEGIN TRY
        -- Step 1: Add WarehouseReceipt
        DECLARE @WarehouseReceiptID INT;
        DECLARE @EmployeeID INT;

        SELECT @EmployeeID = UF.Employ_ID 
        FROM UserInfo UF 
        WHERE UF.AccountName = SUSER_NAME();

        INSERT INTO WarehouseReceipt (EmployeeID, CreateAt, WarehouseID)
        VALUES (@EmployeeID, GETDATE(), @WarehouseID);

        -- Get ID WarehouseReceipt
        SET @WarehouseReceiptID = SCOPE_IDENTITY();

        -- Step 2: Add WarehouseReceiptDetail
        INSERT INTO WarehouseReceiptDetail (WarehouseReceiptID, CellID, quantity, PurchaseOrderID, UpdateTime, UpdateBy, priceHistoryId)
        SELECT @WarehouseReceiptID, RD.CellID, RD.Quantity, RD.PurchaseOrderID, GETDATE(), @EmployeeID, PH.priceHistoryId
        FROM @ReceiptDetails RD
        INNER JOIN PriceHistory PH ON PH.product_id = RD.ProductID;

		-- Step 3: Update QuantityDelivered of PurchaseOrderDetail
		UPDATE POD
		SET POD.QuantityDelivered = 
			CASE 
				-- Nếu chưa nhập kho (QuantityDelivered là NULL hoặc 0), cập nhật số lượng nhập kho
				WHEN POD.QuantityDelivered IS NULL OR POD.QuantityDelivered = 0 THEN RD.Quantity
				-- Nếu số lượng đã giao hiện tại cộng thêm số lượng nhập kho không vượt quá số lượng đã đặt
				WHEN POD.QuantityDelivered + RD.Quantity <= POD.quantity THEN POD.QuantityDelivered + RD.Quantity
				-- Nếu số lượng đã giao cộng thêm số lượng nhập kho vượt quá số lượng đã đặt, chỉ cập nhật bằng số lượng đã đặt
				ELSE POD.quantity
			END
		FROM PurchaseOrderDetail POD
		INNER JOIN PriceHistory PH 
			ON POD.priceHistoryId = PH.priceHistoryId
		INNER JOIN @ReceiptDetails RD 
			ON PH.product_id = RD.ProductID
			AND POD.PurchaseOrderID = RD.PurchaseOrderID
		WHERE POD.PurchaseOrderID = RD.PurchaseOrderID
			AND PH.product_id = RD.ProductID; -- Điều kiện này đảm bảo chỉ cập nhật đúng sản phẩm


        -- Step 4: Update Quantity in Cells
        UPDATE C 
        SET C.Quantity = C.Quantity + RD.Quantity
        FROM Cells C
        INNER JOIN @ReceiptDetails RD ON C.CellID = RD.CellID;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        THROW;
    END CATCH;
END;
GO

GRANT EXECUTE ON TYPE::dbo.ReceiptDetailType TO WarehouseEmployee;
GRANT EXEC ON OBJECT::dbo.sp_InsertWarehouseReceipt TO  WarehouseEmployee;

--=========================================================================================
go
CREATE PROCEDURE sp_GetUndeliveredPurchaseOrders
AS
BEGIN
    SELECT DISTINCT POD.PurchaseOrderID
    FROM PurchaseOrderDetail POD
    WHERE POD.QuantityDelivered < POD.Quantity;
END;
GO

GRANT EXEC ON OBJECT::dbo.sp_GetUndeliveredPurchaseOrders TO  WarehouseEmployee;

exec sp_GetUndeliveredPurchaseOrders

--=========================================
CREATE PROCEDURE sp_GetPurchaseOrderDetails
    @PurchaseOrderID INT
AS
BEGIN
    SELECT 
        P.product_id,
        P.product_name,
        POD.quantity AS QuantityOrdered,
        POD.QuantityDelivered,
        C.CellID,
        C.CellName,
        POD.priceHistoryId,
        PH.price
    FROM PurchaseOrderDetail POD
    INNER JOIN PriceHistory PH 
        ON POD.priceHistoryId = PH.priceHistoryId
    INNER JOIN Product P 
        ON PH.product_id = P.product_id
    LEFT JOIN Cells C 
        ON C.product_id = P.product_id
    WHERE POD.PurchaseOrderID = @PurchaseOrderID
      AND POD.QuantityDelivered < POD.quantity;
END;
GO

EXEC sp_GetPurchaseOrderDetails @PurchaseOrderID = 1;

GRANT EXEC ON OBJECT::dbo.sp_GetPurchaseOrderDetails TO  WarehouseEmployee;



--============================= XUẤT KHO =====================================

CREATE TYPE dbo.DeliveryOrderDetailType AS TABLE (
    OrderID INT,
    priceHistoryId INT,
    Quantity INT,
    CellID INT
);
GO

CREATE PROCEDURE sp_ExportWarehouseGoodsByOrder
    @WarehouseID INT,
	@Note NVARCHAR(50),
    @OrderDetails dbo.DeliveryOrderDetailType READONLY
AS
BEGIN
    BEGIN TRANSACTION;

    BEGIN TRY
        -- Step 1: Add DeliveryNote
        DECLARE @DeliveryNoteID INT;
        DECLARE @EmployeeID INT;

        SELECT @EmployeeID = UF.Employ_ID 
        FROM UserInfo UF 
        WHERE UF.AccountName = SUSER_NAME();

        -- Lấy OrderID từ @OrderDetails
        DECLARE @OrderID INT;
        SELECT TOP 1 @OrderID = OrderID FROM @OrderDetails;

        INSERT INTO DeliveryNote (CreateAt, CreateBy, OrderId, WarehouseId, Note)
        VALUES (GETDATE(), @EmployeeID, @OrderID, @WarehouseID, @Note);

        -- Get ID of the newly created DeliveryNote
        SET @DeliveryNoteID = SCOPE_IDENTITY();

        -- Step 2: Add DeliveryNoteDetail based on OrderDetails
        INSERT INTO DeliveryNoteDetail (DeliveryNote, product_id, CellID, quantity)
        SELECT 
            @DeliveryNoteID, 
            PH.product_id, 
            OD.CellID, 
            OD.Quantity
        FROM 
            @OrderDetails OD
        JOIN 
            PriceHistory PH ON OD.priceHistoryId = PH.priceHistoryId;

        -- Step 3: Update Quantity in Cells and ensure quantity does not go below 0
        UPDATE C
        SET C.Quantity = C.Quantity - OD.Quantity
        FROM Cells C
        INNER JOIN @OrderDetails OD ON C.CellID = OD.CellID
        INNER JOIN PriceHistory PH ON OD.priceHistoryId = PH.priceHistoryId AND C.product_id = PH.product_id
        WHERE C.Quantity >= OD.Quantity;

        -- Check for any rows where quantity would go below 0
        IF EXISTS (SELECT 1 FROM Cells C 
                   INNER JOIN @OrderDetails OD 
                   ON C.CellID = OD.CellID 
                   INNER JOIN PriceHistory PH 
                   ON OD.priceHistoryId = PH.priceHistoryId AND C.product_id = PH.product_id
                   WHERE C.Quantity - OD.Quantity < 0)
        BEGIN
            ROLLBACK TRANSACTION;
            RAISERROR ('Quantity cannot go below 0.', 16, 1);
            RETURN;
        END

		-- Step 4: Update the state of the order to 3 (Completed)
        UPDATE [Order]
        SET State = 3
        WHERE Order_ID = @OrderID;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        THROW;
    END CATCH;
END;
GO
--=============================================================
GRANT EXECUTE ON TYPE::dbo.DeliveryOrderDetailType TO WarehouseEmployee;
GRANT EXEC ON OBJECT::dbo.sp_ExportWarehouseGoodsByOrder TO WarehouseEmployee;

--========Get ORDER IDs==================
CREATE PROCEDURE SP_GetOrderIDs
AS
BEGIN
    SELECT Order_ID
    FROM [Order]
	WHERE State = 2;
END

GRANT EXEC ON OBJECT::dbo.SP_GetOrderIDs TO  WarehouseEmployee;


--GET DETAIL ORDER BY DELIVERY NOTE
GO

CREATE PROCEDURE SP_GetOrderDetailsWE
    @OrderID INT
AS
BEGIN
    SELECT 
        p.product_id,
        p.product_name,
        od.Quantity AS order_quantity,
        c.CellID,
        c.CellName,
        w.WarehouseID,
        w.WarehouseName,
        od.priceHistoryId
    FROM 
        OrderDetail od
    JOIN 
        PriceHistory ph ON od.priceHistoryId = ph.priceHistoryId
    JOIN 
        Product p ON ph.product_id = p.product_id
    JOIN 
        Cells c ON p.product_id = c.product_id
    JOIN 
        Shelve s ON c.ShelvesID = s.ShelvesID
    JOIN 
        Warehouse w ON s.WarehouseID = w.WarehouseID
    WHERE 
        od.Order_Id = @OrderID
        AND c.Quantity >= od.Quantity
END


GRANT EXEC ON OBJECT::dbo.SP_GetOrderDetailsWE TO  WarehouseEmployee;

EXEC SP_GetOrderDetailsWE @OrderID = 26;